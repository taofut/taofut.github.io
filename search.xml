<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[github写博客如果换电脑了怎么办]]></title>
    <url>%2F2019%2F05%2F25%2Fgithub%E5%86%99%E5%8D%9A%E5%AE%A2%E5%A6%82%E6%9E%9C%E6%8D%A2%E7%94%B5%E8%84%91%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%2F</url>
    <content type="text"><![CDATA[思考以前我都是在A电脑上写博客并且发布的，现在我想在B电脑里也写一篇博客并且发布。 其实做法有两点： 直接将A电脑的blog文件夹内容全部拷贝到B电脑对应位置（blog文件夹就是你安装hexo的目录，B电脑里也需要安装hexo环境）。 利用github的分支特性来作为一个中间桥梁。 github的分支特性① 在A电脑里新建一个文件夹（我的是在d:\blog），把你github上的仓库克隆到blog下，命令： 1git clone git@github.com:xxx/xxx.github.io.git ② 进入xxx.github.io.git，删除文件夹里除了.git的其他所有文件 ③ 把A电脑里blog文件夹内的所有文件全部复制到xxx.github.io.git/下 ④ 创建一个叫hexo的分支，并切换到这个分支，命令： 1git checkout -b hexo ⑤ 利用git的基本提交命令，将分支推送到远程，命令： 添加所有文件到暂存区： 1git add -A 提交 1git commit -m "写你的提交描述" 推送hexo分支到远程github仓库 1git push --set-upstream origin hexo 以上步骤弄完，相当于我把A电脑里的blog文件夹托管到了github的hexo分支下，下面来介绍我在B电脑里怎么去写博客。 B电脑里写博客① 首先在B电脑里，将博客的环境搭起来（hexo），这个跟搭建A电脑是一样的 ② 需要将xxx.github.io仓库克隆到本地，命令跟上面一致： 1git clone git@github.com:xxx/xxx.github.io.git ③ 切换到hexo分支，将xxx.github.io文件里的scaffolds、source、themes、_config.yml复制到blog文件夹下（安装hexo的目录） ④ 做完第③步，相当于A电脑里的本地blog内容已经转移到了B电脑里，执行命令： 1hexo g 我之前执行以上命令报错了，然后本地博客访问不了。后来我看了下themes/next，我发现next目录为空，也就是说我从git上拉下来的next就是空的。但是hexo初始化默认的主题文件landscape却有内容，想了想两者的对比，next主题我是从他人git上下载下来的，所以我在提交next的时候，其实提交没成功。（next已经被他人git管理了，我提交包含next的内容到我自己的git仓库，所以提交失败）。简而言之，你的主题文件如果不是从他人git上下载下来的就不会存在这个问题，否则这个只能拿U盘从A电脑里将themes文件夹替换到B电脑的themes。 ⑤ 开始新建博客，在blog目录下执行命令： 1hexo new post "博客名称" ⑥ 博客写完后，从blog\source_posts\找到你的博客，然后复制到xxx.github.io\source_posts\，使用git基本命令提交代码。 ⑦ 此时，写的博客已经同步到了远程仓库，A电脑可以更新本地仓库就能拿到这个博客，现在就是考虑，我是要B电脑发布博客，还是A电脑发布博客。 ⑧ 假设使用A电脑发布博客，那么A电脑需要更新本地的hexo分支，然后拿到博客文件xxx.md复制到blog\source_posts\目录（这就相当于我就是用A电脑写了一篇博客），然后就执行基本的hexo部署发布命令就搞定了。 ⑨ 假设使用B电脑发布博客，直接在blog下执行hexo的部署发布命令即可。 注意事项： 不管是在A电脑发布还是在B电脑发布，两台电脑在写博客之前都要更新下本地的master和hexo分支。（master分支放的是部署发布后的文件，hexo分支放的是原始的blog下的文件）]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jackson常用注解【servyou总结】]]></title>
    <url>%2F2019%2F05%2F22%2Fjackson%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[开发问题一（@JsonInclude的使用）在写后台接口回传数据到前端时，遇到一些细节问题，下面直接看代码。我要回传的对象类如下，从数据库查出来的任何类型数据都放data里参与序列化返回给前端。 12345678910@JsonInclude(JsonInclude.Include.NON_EMPTY)public class NewFrameResponseResult&lt;T&gt; &#123; private boolean success; private T data; private String error;&#125; 情况假设数据库查出来为null，那么data就是null，执行sql是没问题的，success返回true。由于类上面定义了@JsonInclude(JsonInclude.Include.NON_EMPTY)，所以data为null是不会在序列化结果中显示的。前端获取的返回结果：{“success”:true}，后面的js代码直接拿data报错，因为data根本不存在。改进这时候就面临一个问题，我数据库是没查到数据，但是data这个属性还是要返回的，因为这是前端js获取数据的唯一字段，可以在没数据的情况下返回一个空的data（数组长度为零，但不为null）。 1234567891011121314@JsonInclude(JsonInclude.Include.NON_NULL)public class NewFrameResponseResult&lt;T&gt; &#123; private boolean success; private T data; private String error; public static NewFrameResponseResult success(Object data) &#123; return new NewFrameResponseResult(data == null ? Collections.EMPTY_LIST : data); &#125;&#125; 这里允许返回空对象，所以注解就要变为@JsonInclude(JsonInclude.Include.NON_NULL)，然后在返回的方法里判断为null，就将data转换为空集合。前端获取的返回结果：{“success”: true,”data”: []}说明JsonInclude.Include.NON_EMPTY：属性为空或者null都不参与序列化。JsonInclude.Include.NON_NULL：属性为null不参与序列化。 开发问题二（@JsonIgnore和@JsonIgnoreProperties的使用）这次是将数据库查出来的菜单目录封装成树结构，有一个树节点实体TreeNode。由于查出来的数据在封装树的时候需要定义pid参与子节点遍历，但是前端返回结果中是不需要pid这个字段的，那么就在pid字段上加上注解@JsonIgnore，这样pid既参与了树结构的封装，同时也可以不让前端接收到。 123456789101112131415161718192021222324252627@JsonInclude(JsonInclude.Include.NON_EMPTY)public class TreeNode &#123; //根节点类型 public static final String NODE_TYPE_ROOT = "ROOT"; //父节点类型（下面还存在子节点） public static final String NODE_TYPE_GROUP = "GROUP"; //子节点类型（只有子节点） public static final String NODE_TYPE_LEAF = "LEAF"; //节点名称 private String name; //节点id private String nodeId; //节点类型 private String nodeType; //图标 private String className = "iconfont"; //节点url private String url; //父节点id @JsonIgnore private String pid; //当前节点下的子节点 private List&lt;TreeNode&gt; children; //菜单状态Hot（标记点击量高的菜单） private String otherInfo;&#125; 说明@JsonIgnore（作用在属性或方法）：用来告诉Jackson在处理时忽略该注解标注的 java pojo 属性。@JsonIgnoreProperties（作用在类）：@JsonIgnoreProperties和@JsonIgnore的作用相同，都是告诉Jackson该忽略哪些属性，不同之处是@JsonIgnoreProperties是类级别的，并且可以同时指定多个属性。 1234567891011121314151617181920212223242526@JsonIgnoreProperties(value = &#123;"pid","nodeType"&#125;)public class TreeNode &#123; //根节点类型 public static final String NODE_TYPE_ROOT = "ROOT"; //父节点类型（下面还存在子节点） public static final String NODE_TYPE_GROUP = "GROUP"; //子节点类型（只有子节点） public static final String NODE_TYPE_LEAF = "LEAF"; //节点名称 private String name; //节点id private String nodeId; //节点类型 private String nodeType; //图标 private String className = "iconfont"; //节点url private String url; //父节点id private String pid; //当前节点下的子节点 private List&lt;TreeNode&gt; children; //菜单状态Hot（标记点击量高的菜单） private String otherInfo;&#125; @JsonIgnoreType的使用@JsonIgnoreType标注在类上，当其他类引用该类时，该属性将被忽略。 12345678910111213141516@JsonIgnoreTypepublic class User &#123; private Long id; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125;&#125;public class Role &#123; private String name; private String desc; private User user;&#125;]]></content>
      <categories>
        <category>开发中常用注解</category>
      </categories>
      <tags>
        <tag>servyou总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[@RequestParam和@RequestBody的区别【servyou总结】]]></title>
    <url>%2F2019%2F05%2F21%2F%40RequestParam%E5%92%8C%40RequestBody%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[最近在公司写后台接口供前端调用，代码都是按照接口文档的要求实现的，并且自己用postman测试了一遍，参数取值都OK。接口文档的参数传递方式为：{xtdm:’001’}，请求方式都是POST，然后我就自然而然的采用了application/json方式测试。采用application/json方式测试接口之后，发现后台springmvc接收参数使用@RequestParam注解是取不到值的，于是我换成@RequestBody注解就取到值了，当时问题解决。后面整合前端联调接口时，发现前端请求到不了我的controller（http:400），但是postman始终是可以的。看了下前端的ajax请求，发现并不是按照文档的格式传递的参数。虽然是POST请求，但是地址栏也会跟参数过来，于是我尝试把@RequestBody又改为@RequestParam，结果又可以了，然后postman又不行了。 分析和结论我开始采用application/json方式测试，@RequestBody是支持的，后来发现前端的请求方式其实是application/x-www-form-urlencoded，所以@RequestBody就不支持了。只有@RequestParam才支持，并且不管是POST还是GET请求都是OK的。后来我将postman请求方式改为application/x-www-form-urlencoded，验证结果跟前端的一致。所以不要着急写后台接口，一定要明确前端的请求方式是哪一种，这样就避免了返工的情况。 @RequestParam和@RequestBody的使用场景@RequestParam① 支持POST和GET请求。② 只支持Content-Type：为application/x-www-form-urlencoded编码的内容。Http协议中，如果不指定Content-Type，则默认传递的参数就是application/x-www-form-urlencoded类型） @RequestBody① 不支持GET请求。② 必须要在请求头中申明content-Type（如application/json）springMvc通过HandlerAdapter配置的HttpMessageConverters解析httpEntity的数据，并绑定到相应的bean上。 @RequestParam案例使用@RequestParm用于绑定controller上的参数，可以是多个参数，也可以是一个Map集合，GET，POST均可。 123456@PostMapping(value = "requestParam")@ResponseBodypublic Boolean requestParam(@RequestParam(name = "code",required = false) String code)&#123; System.out.println("code:"+code); return true;&#125; @RequestParm中name属性是指定参数名，required属性默认为ture，表示必传。若为false则为非必传。属性有defaultValue默认值选项，若该参数为null时，会将默认值填充到参数上。在项目中还可以使用map来接收多个参数： 1234@RequestMapping(value = "/menu.spring",method = RequestMethod.POST)public NewFrameResponseResult queryTreeList(@RequestParam Map&lt;String, Object&gt; param)&#123; return NewFrameResponseResult.success(fyhsMenuTreeService.queryTreeList(param));&#125; @RequestBody案例@RequestBody绑定一个实体。 123456@PostMapping(value = "requestBody")@ResponseBodypublic User requestBody(@RequestBody User user)&#123; System.out.println("user:"+user.getName()); return user;&#125; @RequestBody也能采用map来接收多个参数。 1234@RequestMapping(value = "/menu.spring",method = RequestMethod.POST)public NewFrameResponseResult queryTreeList(@RequestBody Map&lt;String, Object&gt; param)&#123; return NewFrameResponseResult.success(fyhsMenuTreeService.queryTreeList(param));&#125;]]></content>
      <categories>
        <category>开发中常用注解</category>
      </categories>
      <tags>
        <tag>servyou总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[@Bean的用法]]></title>
    <url>%2F2019%2F05%2F20%2F%E6%B3%A8%E8%A7%A3%40bean%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[@Bean是一个方法级别上的注解，主要用在@Configuration注解的类里，也可以用在@Component注解的类里，添加的bean的id为方法名。 案例下面是@Configuration里的一个例子。 12345678910111213@Configurationpublic class Configure &#123; @Bean public FilterRegistrationBean registLog() &#123; FilterRegistrationBean loggingFilter = new FilterRegistrationBean(new LoggingFilter()); loggingFilter.addUrlPatterns("/*"); loggingFilter.setName("LoggingFilter"); loggingFilter.setOrder(5); return loggingFilter; &#125;&#125; 这个配置就等同于之前在xml里的配置 123&lt;beans&gt; &lt;bean id="registLog" class="org.springframework.boot.web.servlet.FilterRegistrationBean"/&gt;&lt;/beans&gt;]]></content>
      <categories>
        <category>开发中常用注解</category>
      </categories>
      <tags>
        <tag>编程，感悟</tag>
      </tags>
  </entry>
</search>
